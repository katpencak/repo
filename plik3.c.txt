
// Optymalne kolorowanie grafu nieskierowanego
// Data   : 23.05.2014
// (C)2014 mgr Jerzy Wałaszek
//--------------------------------------------

program graph_coloring;
// zmiana do kolokwium 
// Definicja elementu listy sąsiedztwa
type
  PslistEl = ^slistEl;
  slistEl = record
    next : PslistEl;              // Następny element listy
    v : integer;                  // Wierzchołek docelowy
  end;

var
  b,bc,n,m,i,u,v : integer;
  graf           : array of PslistEl;
  CT             : array of integer;
  p,r            : PslistEl;
  cnt            : qword;         // Licznik prób
  test           : boolean;

begin
  read(n,m);                      // Odczytujemy liczbę wierzchołków i krawędzi grafu

  SetLength(graf,n);              // Tablica list sąsiedztwa
  for i := 0 to n - 1 do graf[i] := nil;

  SetLength(CT,n);                // Tablica kolorów wierzchołków

  // Odczytujemy krawędzie grafu

  for i := 1 to m do
  begin
    read(u,v);                    // Wierzchołki krawędzi
    new(p);                       // Tworzymy element listy
    p^.v := u;
    p^.next := graf[v];           // Element dołączamy do listy sąsiadów v
    graf[v] := p;

    new(p);                       // To samo dla krawędzi w drugą stronę
    p^.v := v;
    p^.next := graf[u];           // Element dołączamy do listy sąsiadów u
    graf[u] := p;
  end;

  // Rozpoczynamy algorytm kolorowania grafu

  cnt := 0;

  for i := 0 to n - 1 do CT[i] := 0; // Inicjujemy licznik

  b := 2;                         // Zliczanie rozpoczynamy przy podstawie 2
  bc := 0;                        // Liczba najstarszych cyfr

  while true do
  begin
    if bc > 0 then                // Kombinację sprawdzamy, gdy zawiera najstarszą cyfrę
    begin
      test := true;
      inc(cnt);                   // Zwiększamy liczbę prób
      for v := 0 to n - 1 do      // Przeglądamy wierzchołki grafu
      begin
        p := graf[v];             // Przeglądamy sąsiadów wierzchołka v
        while p <> nil do
        begin
          if CT[v] = CT[p^.v] then // Testujemy pokolorowanie
          begin
            test := false;        // Zaznaczamy porażkę
            break;                // Opuszczamy pętlę while
          end;
          p := p^.next;           // Następny sąsiad
        end;
        if not test then break;   // Opuszczamy pętlę for
      end;
      if test then break;         // Kombinacja znaleziona, kończymy pętlę główną
    end;

    while true do                 // Pętla modyfikacji licznika
    begin
       i := 0;
       while i < n do
       begin
         inc(CT[i]);              // Zwiększamy cyfrę
         if CT[i] = b - 1 then inc(bc);
         if CT[i] < b then break;
         CT[i] := 0;              // Zerujemy cyfrę
         dec(bc);
         inc(i);                  // Modyfikujemy następną cyfrę
       end;
       if i < n then break;       // Wychodzimy z pętli zwiększania licznika
       inc(b);                    // Licznik się przewinął, zwiększamy bazę
    end;
  end;

  // Wyświetlamy wyniki

  writeln;
  for v := 0 to n - 1 do
    writeln('vertex ',v,' has color ',CT[v]);
  writeln;
  writeln('graph chromatic number = ',b);
  writeln('number of tries        = ',cnt);
  writeln;

  // Usuwamy tablice dynamiczne

  for v := 0 to n - 1 do
  begin
    p := graf[v];
    while p <> nil do
    begin
      r := p;
      p := p^.next;
      dispose(r);
    end;
  end;

  SetLength(graf,0);
  SetLength(CT,0);

=======
// Optymalne kolorowanie grafu nieskierowanego
// Data   : 23.05.2014
// (C)2014 mgr Jerzy Wałaszek
//--------------------------------------------

program graph_coloring;
// zmiana do kolokwium
// Definicja elementu listy sąsiedztwa
type
  PslistEl = ^slistEl;
  slistEl = record
    next : PslistEl;              // Następny element listy
    v : integer;                  // Wierzchołek docelowy
  end;

var
  b,bc,n,m,i,u,v : integer;
  graf           : array of PslistEl;
  CT             : array of integer;
  p,r            : PslistEl;
  cnt            : qword;         // Licznik prób
  test           : boolean;

begin
  read(n,m);                      // Odczytujemy liczbę wierzchołków i krawędzi grafu

  SetLength(graf,n);              // Tablica list sąsiedztwa
  for i := 0 to n - 1 do graf[i] := nil;

  SetLength(CT,n);                // Tablica kolorów wierzchołków

  // Odczytujemy krawędzie grafu

  for i := 1 to m do
  begin
    read(u,v);                    // Wierzchołki krawędzi
    new(p);                       // Tworzymy element listy
    p^.v := u;
    p^.next := graf[v];           // Element dołączamy do listy sąsiadów v
    graf[v] := p;

    new(p);                       // To samo dla krawędzi w drugą stronę
    p^.v := v;
    p^.next := graf[u];           // Element dołączamy do listy sąsiadów u
    graf[u] := p;
  end;

  // Rozpoczynamy algorytm kolorowania grafu

  cnt := 0;

  for i := 0 to n - 1 do CT[i] := 0; // Inicjujemy licznik

  b := 2;                         // Zliczanie rozpoczynamy przy podstawie 2
  bc := 0;                        // Liczba najstarszych cyfr

  while true do
  begin
    if bc > 0 then                // Kombinację sprawdzamy, gdy zawiera najstarszą cyfrę
    begin
      test := true;
      inc(cnt);                   // Zwiększamy liczbę prób
      for v := 0 to n - 1 do      // Przeglądamy wierzchołki grafu
      begin
        p := graf[v];             // Przeglądamy sąsiadów wierzchołka v
        while p <> nil do
        begin
          if CT[v] = CT[p^.v] then // Testujemy pokolorowanie
          begin
            test := false;        // Zaznaczamy porażkę
            break;                // Opuszczamy pętlę while
          end;
          p := p^.next;           // Następny sąsiad
        end;
        if not test then break;   // Opuszczamy pętlę for
      end;
      if test then break;         // Kombinacja znaleziona, kończymy pętlę główną
    end;

    while true do                 // Pętla modyfikacji licznika
    begin
       i := 0;
       while i < n do
       begin
         inc(CT[i]);              // Zwiększamy cyfrę
         if CT[i] = b - 1 then inc(bc);
         if CT[i] < b then break;
         CT[i] := 0;              // Zerujemy cyfrę
         dec(bc);
         inc(i);                  // Modyfikujemy następną cyfrę
       end;
       if i < n then break;       // Wychodzimy z pętli zwiększania licznika
       inc(b);                    // Licznik się przewinął, zwiększamy bazę
    end;
  end;

  // Wyświetlamy wyniki

  writeln;
  for v := 0 to n - 1 do
    writeln('vertex ',v,' has color ',CT[v]);
  writeln;
  writeln('graph chromatic number = ',b);
  writeln('number of tries        = ',cnt);
  writeln;

  // Usuwamy tablice dynamiczne

  for v := 0 to n - 1 do
  begin
    p := graf[v];
    while p <> nil do
    begin
      r := p;
      p := p^.next;
      dispose(r);
    end;
  end;

  SetLength(graf,0);
  SetLength(CT,0);


end. 